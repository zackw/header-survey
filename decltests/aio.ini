[preamble]
header = aio.h
baseline = x5

[constants:x5]
AIO_CANCELED    =
AIO_NOTCANCELED =
AIO_ALLDONE     =
LIO_WAIT        =
LIO_NOWAIT      =
LIO_READ        =
LIO_WRITE       =
LIO_NOP         =

[types:x5]
off_t    = signed
# struct sigevent technically has to be complete here, but checking its
# contents is too much trouble (see what a mess signal.ini is).  The
# contents check for struct aiocb will fail if it isn't actually complete.
sigevent = incomplete struct

[types:x7]
pthread_attr_t = opaque
size_t         = unsigned
ssize_t        = signed
time_t         = integral

[structs:x5]
s_aiocb.aio_fildes     = int
s_aiocb.aio_offset     = off_t
s_aiocb.aio_buf        = volatile void *
s_aiocb.aio_nbytes     = size_t
s_aiocb.aio_reqprio    = int
s_aiocb.aio_sigevent   = struct sigevent
s_aiocb.aio_lio_opcode = int

# tv_nsec is spec'd as "long" but the ABI may have to use something
# else (e.g. to keep the structure the same size when 32- and 64-bit
# ABIs on the same OS have different widths of 'long'); so we just
# check it's an integral type.
[structs:x7]
s_timespec.tv_sec  = time_t
s_timespec.tv_nsec = integral

[functions:x5]
aio_cancel  = int : int, struct aiocb *
aio_error   = int : const struct aiocb *
aio_fsync   = int : int, struct aiocb *
aio_read    = int : struct aiocb *
aio_return  = ssize_t : struct aiocb *
aio_suspend = int : const struct aiocb *const *, int, const struct timespec *
aio_write   = int : struct aiocb *
lio_listio  = int : int, struct aiocb *const *, int, struct sigevent *
