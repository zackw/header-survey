[preamble]
header = pthread.h
baseline = x5

# Glossary of optional-module codes:
# BAR = barriers
# CS  = per-thread clocks
# ROB = robust mutexes
# SPI = spinlocks
# TMO = lock acquisition timeouts
# TSH = process-shared synchronization
# TSA = thread stack allocation control
# TPS = scheduling control (P for priorities)

[types:x5]
pthread_attr_t        = opaque
pthread_cond_t        = opaque
pthread_condattr_t    = opaque
pthread_key_t         = opaque
pthread_mutex_t       = opaque
pthread_mutexattr_t   = opaque
pthread_once_t        = opaque
pthread_rwlock_t      = opaque
pthread_t             = opaque
timespec              = incomplete struct

[types:x6:bar]
pthread_barrier_t     = opaque
pthread_barrierattr_t = opaque

[types:x6:cs]
clockid_t             = integral

[types:x6:spi]
pthread_spinlock_t    = opaque

[types:x5:tps]
sched_param           = incomplete struct

[constants:x5]
PTHREAD_COND_INITIALIZER      = pthread_cond_t
PTHREAD_MUTEX_INITIALIZER     = pthread_mutex_t
PTHREAD_ONCE_INIT             = pthread_once_t
PTHREAD_RWLOCK_INITIALIZER    = pthread_rwlock_t
PTHREAD_CANCELED              = void *

PTHREAD_CANCEL_ASYNCHRONOUS   =
PTHREAD_CANCEL_ENABLE         =
PTHREAD_CANCEL_DEFERRED       =
PTHREAD_CANCEL_DISABLE        =
PTHREAD_CREATE_DETACHED       =
PTHREAD_CREATE_JOINABLE       =
PTHREAD_EXPLICIT_SCHED        =
PTHREAD_INHERIT_SCHED         =
PTHREAD_PROCESS_SHARED        =
PTHREAD_PROCESS_PRIVATE       =

[constants:x6:bar]
PTHREAD_BARRIER_SERIAL_THREAD =

[constants:x7:rob]
PTHREAD_MUTEX_ROBUST          =
PTHREAD_MUTEX_STALLED         =

[constants:x5:tps]
PTHREAD_PRIO_INHERIT          =
PTHREAD_PRIO_NONE             =
PTHREAD_PRIO_PROTECT          =
PTHREAD_SCOPE_PROCESS         =
PTHREAD_SCOPE_SYSTEM          =

[constants:x5:xsi]
PTHREAD_MUTEX_DEFAULT         =
PTHREAD_MUTEX_ERRORCHECK      =
PTHREAD_MUTEX_NORMAL          =
PTHREAD_MUTEX_RECURSIVE       =

[functions:x5]
pthread_atfork              = int : void (*$)(void), void (*$)(void),
                                    void(*$)(void)
pthread_attr_destroy        = int : pthread_attr_t *
pthread_attr_getdetachstate = int : const pthread_attr_t *, int *
pthread_attr_getschedparam  = int : const pthread_attr_t *, struct sched_param *
pthread_attr_init           = int : pthread_attr_t *
pthread_attr_setdetachstate = int : pthread_attr_t *, int
pthread_attr_setschedparam  = int : pthread_attr_t *, const struct sched_param *
pthread_cancel              = int : pthread_t
pthread_cond_broadcast      = int : pthread_cond_t *
pthread_cond_destroy        = int : pthread_cond_t *
pthread_cond_init           = int : pthread_cond_t *, const pthread_condattr_t *
pthread_cond_signal         = int : pthread_cond_t *
pthread_cond_timedwait      = int : pthread_cond_t *, pthread_mutex_t *,
                                    const struct timespec *
pthread_cond_wait           = int : pthread_cond_t *, pthread_mutex_t *
pthread_condattr_destroy    = int : pthread_condattr_t *
pthread_condattr_init       = int : pthread_condattr_t *
pthread_create              = int : pthread_t *, const pthread_attr_t *,
                                    void *(*$)(void *), void *
pthread_detach              = int : pthread_t
pthread_equal               = int : pthread_t, pthread_t
pthread_exit                = void : void *
pthread_getspecific         = void * : pthread_key_t
pthread_join                = int : pthread_t, void **
pthread_key_create          = int : pthread_key_t *, void (*$)(void *)
pthread_key_delete          = int : pthread_key_t
pthread_mutex_destroy       = int : pthread_mutex_t *
pthread_mutex_init          = int : pthread_mutex_t *,
                                    const pthread_mutexattr_t *
pthread_mutex_lock          = int : pthread_mutex_t *
pthread_mutex_trylock       = int : pthread_mutex_t *
pthread_mutex_unlock        = int : pthread_mutex_t *
pthread_mutexattr_destroy   = int : pthread_mutexattr_t *
pthread_mutexattr_init      = int : pthread_mutexattr_t *
pthread_once                = int : pthread_once_t *, void (*$)(void)
pthread_rwlock_destroy      = int : pthread_rwlock_t *
pthread_rwlock_init         = int : pthread_rwlock_t *,
                                    const pthread_rwlockattr_t *
pthread_rwlock_rdlock       = int : pthread_rwlock_t *
pthread_rwlock_tryrdlock    = int : pthread_rwlock_t *
pthread_rwlock_trywrlock    = int : pthread_rwlock_t *
pthread_rwlock_unlock       = int : pthread_rwlock_t *
pthread_rwlock_wrlock       = int : pthread_rwlock_t *
pthread_rwlockattr_destroy  = int : pthread_rwlockattr_t *
pthread_rwlockattr_init     = int : pthread_rwlockattr_t *
pthread_self                = pthread_t : void
pthread_setcancelstate      = int : int, int *
pthread_setcanceltype       = int : int, int *
pthread_setspecific         = int : pthread_key_t, const void *
pthread_testcancel          = void : void

[functions:x6:bar]
pthread_barrier_destroy     = int : pthread_barrier_t *
pthread_barrier_init        = int : pthread_barrier_t *,
                                    const pthread_barrierattr_t *, unsigned
pthread_barrier_wait        = int : pthread_barrier_t *
pthread_barrierattr_destroy = int : pthread_barrierattr_t *
pthread_barrierattr_init    = int : pthread_barrierattr_t *

[functions:x6:bar.tsh]
pthread_barrierattr_getpshared = int : const pthread_barrierattr_t *, int *
pthread_barrierattr_setpshared = int : pthread_barrierattr_t *, int

[functions:x6:cs]
pthread_condattr_getclock = int : const pthread_condattr_t *, clockid_t *
pthread_condattr_setclock = int : pthread_condattr_t *, clockid_t
pthread_getcpuclockid     = int : pthread_t, clockid_t *

[functions:x7:rob]
pthread_mutex_consistent    = int : pthread_mutex_t *
pthread_mutexattr_getrobust = int : const pthread_mutexattr_t *, int *
pthread_mutexattr_setrobust = int : pthread_mutexattr_t *, int

[functions:x6:spi]
pthread_spin_destroy = int : pthread_spinlock_t *
pthread_spin_init    = int : pthread_spinlock_t *, int
pthread_spin_lock    = int : pthread_spinlock_t *
pthread_spin_trylock = int : pthread_spinlock_t *
pthread_spin_unlock  = int : pthread_spinlock_t *

[functions:x6:tmo]
pthread_mutex_timedlock    = int : pthread_mutex_t *, const struct timespec *
pthread_rwlock_timedrdlock = int : pthread_rwlock_t *, const struct timespec *
pthread_rwlock_timedwrlock = int : pthread_rwlock_t *, const struct timespec *

[functions:x5:tps]
pthread_attr_getinheritsched     = int : const pthread_attr_t *, int *
pthread_attr_getschedpolicy      = int : const pthread_attr_t *, int *
pthread_attr_getscope            = int : const pthread_attr_t *, int *
pthread_attr_setinheritsched     = int : pthread_attr_t *, int
pthread_attr_setschedpolicy      = int : pthread_attr_t *, int
pthread_attr_setscope            = int : pthread_attr_t *, int
pthread_getschedparam            = int : pthread_t, int *, struct sched_param *
pthread_setschedparam            = int : pthread_t, int,
                                         const struct sched_param *
pthread_mutex_getprioceiling     = int : const pthread_mutex_t *, int *
pthread_mutex_setprioceiling     = int : pthread_mutex_t *, int, int *
pthread_mutexattr_getprioceiling = int : const pthread_mutexattr_t *, int *
pthread_mutexattr_getprotocol    = int : const pthread_mutexattr_t *, int *
pthread_mutexattr_setprioceiling = int : pthread_mutexattr_t *, int
pthread_mutexattr_setprotocol    = int : pthread_mutexattr_t *, int

[functions:x5:tsa]
pthread_attr_getstackaddr = int : const pthread_attr_t *, void **
pthread_attr_getstacksize = int : const pthread_attr_t *, size_t *
pthread_attr_setstackaddr = int : pthread_attr_t *, void *
pthread_attr_setstacksize = int : pthread_attr_t *, size_t

[functions:x6:tsa]
pthread_attr_getstack = int : const pthread_attr_t *, void **, size_t *
pthread_attr_setstack = int : pthread_attr_t *, void *, size_t

[functions:x5:tsh]
pthread_condattr_getpshared   = int : const pthread_condattr_t *, int *
pthread_condattr_setpshared   = int : pthread_condattr_t *, int
pthread_mutexattr_getpshared  = int : const pthread_mutexattr_t *, int *
pthread_mutexattr_setpshared  = int : pthread_mutexattr_t *, int
pthread_rwlockattr_getpshared = int : const pthread_rwlockattr_t *, int *
pthread_rwlockattr_setpshared = int : pthread_rwlockattr_t *, int

[functions:x5:xsi]
pthread_attr_getguardsize = int : const pthread_attr_t *, size_t *
pthread_attr_setguardsize = int : pthread_attr_t *, size_t
pthread_getconcurrency    = int : void
pthread_setconcurrency    = int : int
pthread_mutexattr_gettype = int : const pthread_mutexattr_t *, int *
pthread_mutexattr_settype = int : pthread_mutexattr_t *, int

# pthread_cleanup_push/pop are macros which must be paired correctly.
[special:x5]
__tested__ = pthread_cleanup_push pthread_cleanup_pop
__body__ =
  extern void cleanup(void *);
  pthread_cleanup_push(cleanup, (void *)0);
  pthread_cleanup_pop(1);
