[preamble]
header = netdb.h
baseline = x5

# gethostbyname, gethostbyaddr, h_errno, HOST_NOT_FOUND, NO_DATA,
# NO_RECOVERY, TRY_AGAIN were obsolete in X6 and removed in X7
# (in favor of getaddrinfo/getnameinfo), but we're keeping them for
# now, in separate stanzas; due to wide general use I doubt any
# system implementor would omit the functions, at least.  (glibc
# really does hide h_errno and the constants when _XOPEN_SOURCE=700.)

[types:x5]
uint32_t = unsigned

[structs:x5]
s_hostent.h_name      = char *
s_hostent.h_aliases   = char **
s_hostent.h_addrtype  = int
s_hostent.h_length    = int
s_hostent.h_addr_list = char **

s_netent.n_name       = char *
s_netent.n_aliases    = char **
s_netent.n_addrtype   = int
s_netent.n_net        = uint32_t

s_protoent.p_name     = char *
s_protoent.p_aliases  = char **
s_protoent.p_proto    = int

s_servent.s_name      = char *
s_servent.s_aliases   = char **
s_servent.s_port      = int
s_servent.s_proto     = char *

[constants:x5:ghb]
IPPORT_RESERVED =
HOST_NOT_FOUND  =
NO_DATA         =
NO_RECOVERY     =
TRY_AGAIN       =

[globals:x5:ghb]
h_errno = int

[functions:x5:ghb]
gethostbyname    = struct hostent * : const char *
gethostbyaddr    = struct hostent * : const void *, socklen_t, int

[functions:x5]
gethostent       = struct hostent * : void
sethostent       = void : int
endhostent       = void : void

getnetbyname     = struct netent * : const char *
getnetbyaddr     = struct netent * : uint32_t, int
getnetent        = struct netent * : void
setnetent        = void : int
endnetent        = void : void

getprotobyname   = struct protoent * : const char *
getprotobynumber = struct protoent * : int
getprotoent      = struct protoent * : void
setprotoent      = void : int
endprotoent      = void : void

getservbyname    = struct servent * : const char *, const char *
getservbyport    = struct servent * : int, const char *
getservent       = struct servent * : void
setservent       = void : int
endservent       = void : void

# getaddrinfo family added in X6

[types:x6]
socklen_t = unsigned
sockaddr  = incomplete struct

[structs:x6]
s_addrinfo.ai_flags     = int
s_addrinfo.ai_family    = int
s_addrinfo.ai_socktype  = int
s_addrinfo.ai_protocol  = int
s_addrinfo.ai_addrlen   = socklen_t
s_addrinfo.ai_addr      = struct sockaddr *
s_addrinfo.ai_canonname = char *
s_addrinfo.ai_next      = struct addrinfo *

[functions:x6]
freeaddrinfo = void : struct addrinfo *
gai_strerror = const char * : int
getaddrinfo  = int : const char *, const char *,
                     const struct addrinfo *,
                     struct addrinfo **
getnameinfo  = int : const struct sockaddr *, socklen_t,
                     char *, socklen_t, char *, socklen_t, int

[constants:x6]
AI_PASSIVE     =
AI_CANONNAME   =
AI_NUMERICHOST =
AI_NUMERICSERV =
AI_V4MAPPED    =
AI_ALL         =
AI_ADDRCONFIG  =

NI_NOFQDN      =
NI_NUMERICHOST =
NI_NAMEREQD    =
NI_NUMERICSERV =
NI_DGRAM       =

EAI_AGAIN      =
EAI_BADFLAGS   =
EAI_FAIL       =
EAI_FAMILY     =
EAI_MEMORY     =
EAI_NONAME     =
EAI_SERVICE    =
EAI_SOCKTYPE   =
EAI_SYSTEM     =
EAI_OVERFLOW   =

# NI_NUMERICSCOPE gets its own category because despite having been in
# POSIX for as long as getnameinfo itself has, it was not in RFC 3493
# and therefore seems to have been left out of prominent
# implementations that are otherwise fully compliant.
# e.g. glibc: http://sourceware.org/bugzilla/show_bug.cgi?id=14102
[constants:x6:nsc]
NI_NUMERICSCOPE =
