[preamble]
header = stdatomic.h
baseline = c2011

[types:c2011]
memory_order = opaque
atomic_flag = opaque

# it's not clear to me whether some of these might be optional
[types:c2011:analog]
atomic_bool           = integral
atomic_char           = integral
atomic_schar          = signed
atomic_uchar          = unsigned
atomic_short          = signed
atomic_ushort         = unsigned
atomic_int            = signed
atomic_uint           = unsigned
atomic_long           = signed
atomic_ulong          = unsigned
atomic_llong          = signed
atomic_ullong         = unsigned
atomic_char16_t       = unsigned
atomic_char32_t       = unsigned
atomic_wchar_t        = integral
atomic_int_least8_t   = signed
atomic_uint_least8_t  = unsigned
atomic_int_least16_t  = signed
atomic_uint_least16_t = unsigned
atomic_int_least32_t  = signed
atomic_uint_least32_t = unsigned
atomic_int_least64_t  = signed
atomic_uint_least64_t = unsigned
atomic_int_fast8_t    = signed
atomic_uint_fast8_t   = unsigned
atomic_int_fast16_t   = signed
atomic_uint_fast16_t  = unsigned
atomic_int_fast32_t   = signed
atomic_uint_fast32_t  = unsigned
atomic_int_fast64_t   = signed
atomic_uint_fast64_t  = unsigned
atomic_intptr_t       = signed
atomic_uintptr_t      = unsigned
atomic_size_t         = signed
atomic_ptrdiff_t      = unsigned
atomic_intmax_t       = signed
atomic_uintmax_t      = unsigned


[constants:c2011]
memory_order_relaxed = memory_order
memory_order_consume = memory_order
memory_order_acquire = memory_order
memory_order_release = memory_order
memory_order_acq_rel = memory_order
memory_order_seq_cst = memory_order

ATOMIC_BOOL_LOCK_FREE     =
ATOMIC_CHAR_LOCK_FREE     =
ATOMIC_CHAR16_T_LOCK_FREE =
ATOMIC_CHAR32_T_LOCK_FREE =
ATOMIC_WCHAR_T_LOCK_FREE  =
ATOMIC_SHORT_LOCK_FREE    =
ATOMIC_INT_LOCK_FREE      =
ATOMIC_LONG_LOCK_FREE     =
ATOMIC_LLONG_LOCK_FREE    =
ATOMIC_POINTER_LOCK_FREE  =

ATOMIC_FLAG_INIT = atomic_flag

# most of these are documented as generic functions; we test them
# exclusively with _Atomic int (except where that's not an option).
[fn_macros:c2011]
atomic_init         = void : volatile _Atomic int *, int
kill_dependency     = int : int
atomic_is_lock_free = _Bool : const volatile _Atomic int *

atomic_thread_fence = void  : memory_order
atomic_signal_fence = void  : memory_order

atomic_store             = void : volatile _Atomic int *, int
atomic_store_explicit    = void : volatile _Atomic int *, int, memory_order
atomic_load              = int  : volatile _Atomic int *
atomic_load_explicit     = int  : volatile _Atomic int *, memory_order
atomic_exchange          = int  : volatile _Atomic int *, int
atomic_exchange_explicit = int  : volatile _Atomic int *, int, memory_order

atomic_compare_exchange_strong =
  _Bool : volatile _Atomic int *, int *, int
atomic_compare_exchange_strong_explicit =
  _Bool : volatile _Atomic int *, int *, int, memory_order, memory_order
atomic_compare_exchange_weak =
  _Bool : volatile _Atomic int *, int *, int
atomic_compare_exchange_weak_explicit =
  _Bool : volatile _Atomic int *, int *, int, memory_order, memory_order

atomic_fetch_add          = int : volatile _Atomic int *, int
atomic_fetch_add_explicit = int : volatile _Atomic int *, int, memory_order
atomic_fetch_sub          = int : volatile _Atomic int *, int
atomic_fetch_sub_explicit = int : volatile _Atomic int *, int, memory_order
atomic_fetch_or           = int : volatile _Atomic int *, int
atomic_fetch_or_explicit  = int : volatile _Atomic int *, int, memory_order
atomic_fetch_xor          = int : volatile _Atomic int *, int
atomic_fetch_xor_explicit = int : volatile _Atomic int *, int, memory_order
atomic_fetch_and          = int : volatile _Atomic int *, int
atomic_fetch_and_explicit = int : volatile _Atomic int *, int, memory_order

atomic_flag_test_and_set          = _Bool : volatile atomic_flag *
atomic_flag_test_and_set_explicit = _Bool : volatile atomic_flag *, memory_order
atomic_flag_clear                 = void  : volatile atomic_flag *
atomic_flag_clear_explicit        = void  : volatile atomic_flag *, memory_order

[special_decls:c2011]
_Atomic         = _Atomic int $
ATOMIC_VAR_INIT = _Atomic int $ = ATOMIC_VAR_INIT(42)
