[preamble]
header   = math.h
baseline = c89

[types:c99]
float_t  = floating
double_t = floating

[constants:c89]
HUGE_VAL = double

[constants:c99]
HUGE_VALF = float
HUGE_VALL = long double

FP_INFINITE    =
FP_NAN         =
FP_NORMAL      =
FP_SUBNORMAL   =
FP_ZERO        =

FP_ILOGB0      =
FP_ILOGBNAN    =

MATH_ERRNO     =
MATH_ERREXCEPT =

[constants:c99:optional]
# INFINITY is mandatory, but if infinities are not supported, it will
# expand to "a positive constant of type `float` that overflows at
# translation time" ...in which case using it is a constraint
# violation, according to footnote 192.  Feh.
INFINITY = float
# "The macro `NAN` is defined if and only if the implementation
# supports quiet NaNs for the `float` type."
NAN      = float

# MAXFLOAT marked obsolete in X7 (duplicates FLT_MAX)
[constants:x5:xsi]
M_E        = double
M_LOG2E    = double
M_LOG10E   = double
M_LN2      = double
M_LN10     = double
M_PI       = double
M_PI_2     = double
M_PI_4     = double
M_1_PI     = double
M_2_PI     = double
M_2_SQRTPI = double
M_SQRT2    = double
M_SQRT1_2  = double

[globals:c99]
math_errhandling = int

[globals:x5]
signgam = int

[functions:c89]
acos   = double : double
asin   = double : double
atan   = double : double
atan2  = double : double, double

cos    = double : double
sin    = double : double
tan    = double : double

cosh   = double : double
sinh   = double : double
tanh   = double : double

exp    = double : double
log    = double : double
log10  = double : double
pow    = double : double, double
sqrt   = double : double

frexp  = double : double, int *
ldexp  = double : double, int
modf   = double : double, double *

ceil   = double : double
fabs   = double : double
floor  = double : double
fmod   = double : double, double

[functions:c99]
# Float and long double equivalents of C89 math functions
acosf  = float : float
asinf  = float : float
atanf  = float : float
atan2f = float : float, float

cosf   = float : float
sinf   = float : float
tanf   = float : float

coshf  = float : float
sinhf  = float : float
tanhf  = float : float

expf   = float : float
logf   = float : float
log10f = float : float
powf   = float : float, float
sqrtf  = float : float

frexpf = float : float, int *
ldexpf = float : float, int
modff  = float : float, float *

ceilf  = float : float
fabsf  = float : float
floorf = float : float
fmodf  = float : float, float

acosl  = long double : long double
asinl  = long double : long double
atanl  = long double : long double
atan2l = long double : long double, long double

cosl   = long double : long double
sinl   = long double : long double
tanl   = long double : long double

coshl  = long double : long double
sinhl  = long double : long double
tanhl  = long double : long double

expl   = long double : long double
logl   = long double : long double
log10l = long double : long double
powl   = long double : long double, long double
sqrtl  = long double : long double

frexpl = long double : long double, int *
ldexpl = long double : long double, int
modfl  = long double : long double, long double *

ceill  = long double : long double
fabsl  = long double : long double
floorl = long double : long double
fmodl  = long double : long double, long double

# Functions not in C89
acosh       = double    : double
asinh       = double    : double
atanh       = double    : double

exp2        = double    : double
expm1       = double    : double
cbrt        = double    : double
hypot       = double    : double, double

ilogb       = int       : double
log1p       = double    : double
log2        = double    : double
logb        = double    : double
scalbn      = double    : double, int
scalbln     = double    : double, long int

erf         = double    : double
erfc        = double    : double
lgamma      = double    : double
tgamma      = double    : double

nearbyint   = double    : double
rint        = double    : double
lrint       = long      : double
llrint      = long long : double
round       = double    : double
lround      = long      : double
llround     = long long : double
trunc       = double    : double
remainder   = double    : double, double

remquo      = double    : double, double, int *
copysign    = double    : double, double
nan         = double    : const char *
nextafter   = double    : double, double
nexttoward  = double    : double, long double
fdim        = double    : double, double
fmax        = double    : double, double
fmin        = double    : double, double
fma         = double    : double, double, double

acoshf      = float     : float
asinhf      = float     : float
atanhf      = float     : float

exp2f       = float     : float
expm1f      = float     : float
cbrtf       = float     : float
hypotf      = float     : float, float

ilogbf      = int       : float
log1pf      = float     : float
log2f       = float     : float
logbf       = float     : float
scalbnf     = float     : float, int
scalblnf    = float     : float, long int

erff        = float     : float
erfcf       = float     : float
lgammaf     = float     : float
tgammaf     = float     : float

nearbyintf  = float     : float
rintf       = float     : float
lrintf      = long      : float
llrintf     = long long : float
roundf      = float     : float
lroundf     = long      : float
llroundf    = long long : float
truncf      = float     : float
remainderf  = float     : float, float

remquof     = float     : float, float, int *
copysignf   = float     : float, float
nanf        = float     : const char *
nextafterf  = float     : float, float
nexttowardf = float     : float, long double
fdimf       = float     : float, float
fmaxf       = float     : float, float
fminf       = float     : float, float
fmaf        = float     : float, float, float

acoshl      = long double : long double
asinhl      = long double : long double
atanhl      = long double : long double

exp2l       = long double : long double
expm1l      = long double : long double
cbrtl       = long double : long double
hypotl      = long double : long double, long double

ilogbl      = int         : long double
log1pl      = long double : long double
log2l       = long double : long double
logbl       = long double : long double
scalbnl     = long double : long double, int
scalblnl    = long double : long double, long int

erfl        = long double : long double
erfcl       = long double : long double
lgammal     = long double : long double
tgammal     = long double : long double

nearbyintl  = long double : long double
rintl       = long double : long double
lrintl      = long        : long double
llrintl     = long long   : long double
roundl      = long double : long double
lroundl     = long        : long double
llroundl    = long long   : long double
truncl      = long double : long double
remainderl  = long double : long double, long double

remquol     = long double : long double, long double, int *
copysignl   = long double : long double, long double
nanl        = long double : const char *
nextafterl  = long double : long double, long double
nexttowardl = long double : long double, long double
fdiml       = long double : long double, long double
fmaxl       = long double : long double, long double
fminl       = long double : long double, long double
fmal        = long double : long double, long double, long double

# gamma, scalb removed in X7
# many other functions subsumed by C99
# glibc throws in *f and *l variants of the below, but AFAICT
# no standard requires them.
[functions:x5:xsi]
j0 = double : double
j1 = double : double
jn = double : int, double
y0 = double : double
y1 = double : double
yn = double : int, double

# The classification and comparison macros are type-generic.
# There is no good way to test this, so we just feed them
# 'long double' arguments and call it enough.
[fn_macros:c99]
fpclassify     = int : long double
isfinite       = int : long double
isinf          = int : long double
isnan          = int : long double
isnormal       = int : long double
signbit        = int : long double
isgreater      = int : long double, long double
isgreaterequal = int : long double, long double
isless         = int : long double, long double
islessequal    = int : long double, long double
islessgreater  = int : long double, long double
isunordered    = int : long double, long double
