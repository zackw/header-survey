[preamble]
header   = time.h
baseline = c89

# legacy X/Open items skipped:
# CLK_TCK

[types:c89]
size_t  = unsigned
clock_t = arithmetic
time_t  = integral

[types:x5:tmr]
clockid_t = arithmetic

[types:x6:cpt]
pid_t = signed

[types:x7]
locale_t = opaque

# C89 and C99 specify that all of these have type 'int', but an
# implementation might reasonably pick a different type for some of
# them, whether to save space (sec, min, hour, mday, mon, wday, isdst
# are all packable into 'unsigned char', and yday would fit into a
# 9-bit bitfield) or to extend the range (a 64-bit second-counting
# time_t can reach well past Gregorian year 2,147,485,547) so we don't
# aggressively validate that as we do for e.g. ldiv_t.
[structs:c89]
s_tm.tm_sec   = integral
s_tm.tm_min   = integral
s_tm.tm_hour  = integral
s_tm.tm_mday  = integral
s_tm.tm_mon   = integral
s_tm.tm_year  = integral
s_tm.tm_wday  = integral
s_tm.tm_yday  = integral
s_tm.tm_isdst = integral

# tv_nsec is spec'd as "long" but the ABI may have to use something
# else (e.g. to keep the structure the same size when 32- and 64-bit
# ABIs on the same OS have different widths of 'long'); so we just
# check it's an integral type.
[structs:x5:tmr]
s_timespec.tv_sec  = time_t
s_timespec.tv_nsec = integral

s_itimerspec.it_interval = struct timespec
s_itimerspec.it_value    = struct timespec

[constants:c89]
NULL           = void *
CLOCKS_PER_SEC = clock_t

[constants:x5:tmr]
CLOCK_REALTIME = clockid_t
TIMER_ABSTIME  = int

[constants:x6:tmr]
CLOCK_PROCESS_CPUTIME_ID = clockid_t
CLOCK_THREAD_CPUTIME_ID  = clockid_t

[constants:x6:mon]
CLOCK_MONOTONIC = clockid_t

[constants:c2011]
TIME_UTC =

[globals:x5]
tzname = char **

[globals:x5:xsi]
getdate_err = int
daylight    = int
timezone    = long

[functions:c89]
clock     = clock_t : void
time      = time_t  : time_t *

difftime  = double      : time_t, time_t
mktime    = time_t      : struct tm *
gmtime    = struct tm * : const time_t *
localtime = struct tm * : const time_t *

ctime     = char * : const time_t *
asctime   = char * : const struct tm *
strftime  = size_t : char *, size_t, const char *, const struct tm *

[functions:x5]
tzset = void : void

[functions:x5:tmr]
clock_getres  = int : clockid_t, struct timespec *
clock_gettime = int : clockid_t, struct timespec *
clock_settime = int : clockid_t, const struct timespec *
nanosleep     = int : const struct timespec *, struct timespec *

timer_create     = int : clockid_t, struct sigevent *, timer_t *
timer_delete     = int : timer_t
timer_gettime    = int : timer_t, struct itimerspec *
timer_getoverrun = int : timer_t
timer_settime = int : timer_t, int, const struct itimerspec*, struct itimerspec*

[functions:x5:tsf]
asctime_r   = char *      : const struct tm *, char *
ctime_r     = char *      : const time_t *, char *
gmtime_r    = struct tm * : const time_t *, struct tm *
localtime_r = struct tm * : const time_t *, struct tm *

[functions:x5:xsi]
getdate  = struct tm * : const char *
strptime = char *      : const char *, const char *, struct tm *

[functions:x6:cs]
clock_nanosleep = int : clockid_t, int, const struct timespec*, struct timespec*

[functions:x6:cpt]
clock_getcpuclockid = int : pid_t, clockid_t *

[functions:x7]
strftime_l = size_t : char *, size_t, const char *, const struct tm *, locale_t

[functions:c2011]
timespec_get = int : struct timespec *, int
