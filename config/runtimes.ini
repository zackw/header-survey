# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This file tells scansys.py how to identify the target operating
# system.  What we care most about in this context is the identity of
# the C runtime library; the identity of the kernel is much less
# important.  For instance, knowing that the target C runtime is GNU
# libc tells us how to enable all extensions (-D_GNU_SOURCE), whereas
# knowing that the target kernel is Linux is only useful for
# categorization.

# Each section (except META, far below) names one OS, and should have
# all of the following properties:
#
# category:   The design family to which the OS belongs.
# label:      The human-readable official label for the OS.
#
# id_expr:    An #if expression which is true on this OS, and only on this OS.
# version_detector:
#             C source code which, when preprocessed, will produce exactly
#             one line of the form "VERSION=<number>".  The <number> should
#             be in the usual x.y or x.y.z format.  All whitespace and
#             quotation marks on the line will be stripped out.  If it is not
#             possible to detect the version number of the C runtime and/or
#             operating system by preprocessing a source file, leave this
#             property unset, and `uname -r` will be used instead (if we
#             think we are not testing a cross compiler).  #include <errno.h>
#             is automatically prepended to the code.
# version_adjust:
#             A complete definition of a Python function, also named
#             'version_adjust', which takes one argument, the version number
#             (without VERSION=, whitespace, or quotation marks) generated by
#             'version_detector' (or `uname -r` if 'version_detector' is
#             unset, and rewrites it however is appropriate.  You might wish
#             to truncate it to fewer components, add a leading component, or
#             change some of the numbers to reflect how people actually refer
#             to the OS, for instance.  If omitted, no transformation is
#             made.  Put a vertical bar at the beginning of each line to make
#             sure the indentation is preserved.
#
# max_features_macros:
#             Space-separated list of macro definitions (in command line
#             NAME=VALUE format, but without the leading -D) to make in order
#             to enable as many library features as possible.  Omit if there
#             are no such macro(s).
# max_features_std:
#             If the library mode enabled by 'max_features_macros' requires a
#             specific level of C standard conformance to work correctly, set
#             this to 'c1989', 'c1999', or 'c2011' as appropriate.

[linux_glibc]
category = Linux
label = GNU libc
id_expr = defined __linux__ && defined __GLIBC__
version_detector =
  VERSION=__GLIBC__.__GLIBC_MINOR__
# version_adjust not needed
max_features_macros = _GNU_SOURCE

[freebsd]
category = BSD
label = FreeBSD
id_expr = defined __FreeBSD__
# version_detector not available
version_adjust =
  |def version_adjust(ver):
  |    x = ver.find("-")
  |    if x != -1: ver = ver[:x]
  |    return ver
# max_features_macros not available

[netbsd]
category = BSD
label = NetBSD
id_expr = defined __NetBSD__
# version_detector not available
max_features_macros = _NETBSD_SOURCE

[osx]
category = Commercial Unix
label    = MacOS X
id_expr  = defined __MACH__ && defined __APPLE__
# This is not precisely what we want but it is close enough.
version_detector =
   VERSION=__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
version_adjust =
   |def version_adjust(rawver):
   |    major, minor = divmod(int(rawver), 100)
   |    minor, patch = divmod(minor, 10)
   |    return "%d.%d" % (major, minor)
max_features_macros = _DARWIN_C_SOURCE

[META]
# This rather large regexp is only used to weed out definitely-irrelevant
# entries from the list of "potential system-identifying macros" that is
# printed when the configuration table above does not identify the operating
# system.  It is not necessary to add every uninteresting macro to the list,
# but if you encounter a whole new family of junk that's likely to appear on
# other systems, it would be helpful to add it.
#
# The very first two lines prune all the *standard* macros that <errno.h> is
# expected to define.  On a modern system, this ought to leave only macros
# within the "system namespace" (i.e. beginning with either two underscores,
# or an underscore and then a capital letter).  The remainder of the list is
# grouped into macros beginning with one underscore, and macros beginning with
# two underscores.
not_system_id_macros = ^(?:
  errno$ |
  E[A-Z0-9]+$ |

  OBJC_NEW_PROPERTIES |
  _(?:
      [A-Z0-9_]+_(?:T|H_?|SOURCE)$
    | C_LABEL
    | DARWIN_FEATURE
    | LP64$
    | LONGLONG$
    | USE_FORTIFY_LEVEL$ ) |
  __(?:
      [A-Z0-9_]+_(?:T|H_?|SOURCE|VISIBLE)$
    | (?:FLT|DBL|LDBL|DEC[0-9]*)
      _(?:TYPE|(?:DECIMAL_|MANT_)?DIG|HAS_(?:DENORM|INFINITY|QUIET_NAN)
	  |(?:DENORM|SUBNORMAL)_MIN|(?:MIN|MAX)(?:_(?:10_)?EXP)?
	  |DEN|EPSILON|EVAL_METHOD)__$
    | ([UW]?INT(?:MAX|PTR|(?:_FAST|_LEAST)?[0-9]+)?
       |U?LONG(?:_LONG)?|U?SHRT|[USW]?CHAR[0-9]*
       |SIZE|PTRDIFF|SIG_ATOMIC)
      _(?:C(?:_SUFFIX)?|MAX|MIN|TYPE|WIDTH) (?:__)?$
    | (?:ORDER_)?(?:BIG|LITTLE|PDP)_ENDIAN(?:__)?$
    | (?:KERNEL_)?(?:COPYRIGHT|FBSDID|RCSID|SCCSID2?)$
    | (?:UN|DE)(?:CONST|QUALIFY|VOLATILE)$
    | (?:BEGIN|END)_
    | ALIGNBYTES$
    | ASMNAME[0-9]*$
    | ATOMIC_
    | BIGGEST_ALIGNMENT__$
    | BITS?$
    | BLOCKS__$
    | BYTE_ORDER__$
    | CAST$
    | CAST_AWAY_QUALIFIER$
    | CC_SUPPORTS_
    | CHAR_BIT__$
    | _?CONCAT[0-9]*$
    | CONSTANT_CFSTRINGS__$
    | CTASSERT
    | DECIMAL_DIG__$
    | DECIMAL_BID_FORMAT__$
    | DYNAMIC__$
    | ELF__$
    | FINITE_MATH_ONLY__$
    | FLOAT_WORD_ORDER__$
    | FLT_RADIX__$
    | GCC_
    | GNUC_
    | GNUCLIKE_
    | GXX_
    | IDSTRING$
    | KERNEL_STRICT_NAMES$
    | KPRINTF_ATTRIBUTE(?:__)?$
    | LONG_LONG_SUPPORTED(?:__)?$
    | LOWEST_SET_BIT$
    | LP64(?:__)?$
    | LDBL_REDIR
    | MMX(?:__)?$
    | NO_INLINE__$
    | NO_MATH_INLINES$
    | NTH$
    | P$
    | PIC(?:__)?$
    | PMT$
    | POINTER_WIDTH(?:__)?$
    | PRAGMA_REDEFINE_EXTNAME$
    | PRI[diuoxX]
    | PROJECT_VERSION$
    | REDIRECT$
    | _?RENAME$
    | REGISTER_PREFIX(?:__)?$
    | SECTIONSTRING$
    | SHIFT
    | SIZEOF_
    | SSE[0-9]*(?:_MATH)?(?:__)?$
    | SSP(?:__)?$
    | SSSE[0-9]*(?:_MATH)?(?:__)?$
    | STDC_
    | [_X]?STRING$
    | THROW$
    | USER_LABEL_PREFIX(?:__)?$
    | USE_
    | USING_NAMESPACE_
    | VERSION__$
    | WORDSIZE(?:_COMPAT32)?$
    | (?:extern_)?(?:always_)?inline$
    | (?:strict_)?(?:weak_|strong_|)alias$
    | aconst$
    | aligned$
    | amd64(?:__)?$
    | arraycount$
    | attribute_
    | block(?:__)?$
    | bos[0-9]*
    | bounded
    | c99inline$
    | clang_
    | code_model_
    | compactcall$
    | const(?:__|func)?$
    | core2(?:__)?$
    | dead[0-9]*(?:__)?$
    | deprecated(?:__)?$
    | dso_
    | errno(?:__)?$
    | errordecl
    | exported
    | format
    | flexarr
    | func(?:__)?$
    | gnu89_inline
    | hidden
    | i[0-9]+86(?:__)?$
    | indr_reference$
    | insn_barrier$
    | k8(?:__)?$
    | llvm(?:__)?$
    | link_set_
    | long_double_t$
    | malloc_like
    | nocona(?:__)?$
    | no(?:clone|inline|profile)$
    | nonnull$
    | offsetof
    | packed(?:$|_)
    | pentium
    | pic(?:__)?$
    | predict(?:$|_)
    | printf[0-9]*like(?:__)?$
    | ptr_t$
    | ptrvalue$
    | pure[0-9]*(?:__)?$
    | rangeof
    | restrict(?:__)?$
    | restrict_arr$
    | returns_twice$
    | scanflike(?:__)?$
    | section$
    | signed(?:__)?$
    | static_cast(?:__)?$
    | strong(?:_reference)?(?:__)?$
    | stub_
    | sym_
    | tune_
    | unix(?:__)?$
    | unbounded$
    | unsafe_unretained$
    | (?:un)?used(?:__)?$
    | va_arg_
    | volatile(?:__)?$
    | warn
    | weak(?:ref)?(?:$|_)
    | wur$
    | x86_64(?:__)?$
  ))
