# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This file controls automatic probes for the various possible levels
# of standards conformance exposed by the C compiler and library. The
# complete matrix of potentially- worthwhile test modes is the
# Cartesian product of all the following column vectors:
#
#  ISO C   POSIX/XSI                 Threads  Strict conformance
#  -----   -----------------------   -------  ------------------
#  C1989   _POSIX_C_SOURCE=199506L   off      off
#  C1999   _XOPEN_SOURCE=500         on       on
#  C2011   _POSIX_C_SOURCE=200112L
#          _XOPEN_SOURCE=600
#          _POSIX_C_SOURCE=200809L
#          _XOPEN_SOURCE=700
#          "everything" (e.g. _GNU_SOURCE)
#
# for a grand total of 3*7*2*2 = 84 different test modes.  Testing all
# of these would be prohibitively expensive, and would require
# additional annotation in the content_tests.  Instead, we identify up
# front the *highest* level of C and POSIX/XSI conformance (not
# counting the "everything" mode) that is supported by the platform.
# We then test a reduced 3x2x2 matrix: (default behavior, highest
# conformance level, "everything) * (threads/not) * (conformance/not).
# We also seek to identify whether there is a meaningful distinction
# between "threads" and "not", so we can skip that if practical.
#
# The project of detecting which modes are meaningful is hampered by
# various platforms (notably the *BSDs) not bothering to implement the
# POSIX/XSI feature reporting macros (e.g. _POSIX_VERSION), even as
# they *do* implement the feature *selection* macros
# (e.g. _POSIX_C_SOURCE).  Thus we must resort to the strategy of
# "knowing" things which are "core" components of each standard, i.e.
# if X is absent under the appropriate feature selection macros, we
# can presume that standard level Y is *not* implemented; inversely,
# if it is present, we should test that standard level in detail.
#
# Two very high-level heuristics are hardcoded into scansys.py:
# if <unistd.h> is absent, no POSIX conformance modes are tested;
# if <pthread.h> is absent, no threading modes are tested.
#
# Note that the complete set of *headers* is always tested in every
# mode, even if they belong to standard levels that we think aren't
# supported.

[CATEGORIES]
C        = ISO C     | c1989, c1999, c2011
POSIX    = POSIX/XSI | p1995, x5, p2001, x6, p2008

[c1989]
label    = C1989
option   = cc:c1989
qheader   = stdlib.h
succeeds = ldiv_t ldiv;
fails    = lldiv_t lldiv;

[c1999]
label    = C1999
option   = cc:c1999
header   = complex.h
succeeds = complex double foo(complex double x) { return csin(x); }
fails    = complex double var = CMPLX(3, 2);

[c2011]
label    = C2011
option   = cc:c2011
header   = stdatomic.h
succeeds = atomic_flag ff;

# N.B. _POSIX_C_SOURCE and _XOPEN_SOURCE come in pairs; each _XOPEN_SOURCE
# value is supposed to enable all the same stuff as the _POSIX_C_SOURCE
# value immediately above it, plus a batch of "XSI" extensions.

[p1995]
label    = POSIX.1-1995
option   = _POSIX_C_SOURCE=199506L
header   = unistd.h
succeeds = int foo(int a, off_t b) { return ftruncate(a, b); }
fails    = int foo(const char *a, off_t b) { return truncate(a, b); }

[x5]
label    = X/Open Issue 5
option   = _XOPEN_SOURCE=500
header   = unistd.h
succeeds = int foo(const char *a, off_t b) { return truncate(a, b); }
fails    = int foo(char *a, size_t b) { return gethostname(a, b); }

[p2001]
label    = POSIX.1-2001
option   = _POSIX_C_SOURCE=200112L
header   = sys/stat.h
succeeds = int foo(int x) { return S_ISSOCK(x); }
fails    = int foo(int x) { return (x & S_IFSOCK) != 0; }

[x6]
label    = X/Open Issue 6
option   = _XOPEN_SOURCE=600
header   = sys/stat.h
succeeds = int foo(int x) { return (x & S_IFSOCK) != 0; }
fails    = int foo(int a, const char *b, mode_t c, int d)
           { return fchmodat(a, b, c, d); }

[p2008]
label    = POSIX.1-2008
option   = _POSIX_C_SOURCE=200809L
header   = sys/stat.h
succeeds = int foo(int a, const char *b, mode_t c, int d)
               { return fchmodat(a, b, c, d); }
fails    = int foo(int a, const char *b, mode_t c, dev_t d)
               { return mknodat(a, b, c, d); }

[x7]
label    = X/Open Issue 7
option   = _XOPEN_SOURCE=700
header   = sys/stat.h
succeeds = int foo(int a, const char *b, mode_t c, dev_t d)
               { return mknodat(a, b, c, d); }


