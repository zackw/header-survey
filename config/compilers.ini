# -*- encoding: utf-8 -*-

# Copyright 2013-2014 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

## Compilers
## ---------
##
## This config file specifies how to identify the compiler in use,
## how to invoke it, how to put it into a strictly standards-compliant
## mode, and how to interpret certain things in its output.
## There is one section for each compiler, plus some defaults.
##
## Each section must declare at least these three properties:
##
## .. prop:: id_macro
##
##     Macro which this compiler defines to identify itself.
##
## .. prop:: id_regexp
##
##     Regular expression which will match the "``version``" output
##     of this compiler (see below).  It must have a named match group,
##     ``(?P<version> ... )``, which extracts the compiler's version
##     number.  If the version number might appear in two different
##     places, use ``<version1>`` and ``<version2>`` instead.
##     Optionally, include a ``<details>`` match group to extract
##     additional detail about the compiler.  If *that* might appear
##     in two different places, use ``<details1>`` and ``<details2>``
##     instead.
##
## .. prop:: version
##
##     Command line options to get the compiler to print its
##     version number.  In some cases it is necessary to provide
##     a source file to make this happen (MSVC, HP acc); an argument
##     "``$.c``" or "``$.i``" will do that.
##
## These properties are also required, but they have defaults that are
## correct for many compilers:
##
## .. prop:: imitated
##
##     Set this to the keyword ``yes`` if other compilers imitate this
##     compiler, by defining its ``id_macro``.   Default: ``no``.
##
## .. prop:: notfound_re
##
##     Regular expression which matches this compiler's error message
##     for when an ``#include`` file does not exist.  The default matches
##     the phrase "No such file or directory".
##
## .. prop:: errloc_re
##
##     Regular expression which extracts the file name and line number
##     from this compiler's error messages, as named capture groups
##     ``<file>`` and ``<line>`` respectively.  The default matches the
##     GNUish :samp:`{file}:{line}[:{column}]: {message}` convention.
##
## .. prop:: define
##
##     A single command line switch that defines a macro.  The macro
##     to define will be appended to the specified string, in the
##     format :samp:`{name}={value}`.  Only object-like macros will be
##     defined this way.  Default: ``-D``.
##
## .. prop:: compile
##
##     Space-separated list of command line options to compile a
##     source file without linking.  If possible, disable the
##     assembler too; even better, disable everything but validity
##     checking.  You should also turn on aggressive warnings and make
##     warnings into errors; however, do *not* request strict
##     conformance with any level of the C standard in this set of
##     options. Each dollar sign will be replaced by the basename of
##     the source file (i.e. with "``.c``" chopped off).
##     Default: ``-S -o $.s``.
##
## .. prop:: preproc
##
##     As ``compile``, but for running the preprocessor only.
##     This MUST output to a file, not to stdout.  Default: ``-E -o $.i``.
##
## .. prop:: preproc_out
##
##     Name of the file that a ``preproc`` invocation will produce.
##     Default: ``$.i``.
##
## .. prop:: compile_out
##
##     Name of the file that a ``compile`` invocation will produce, if any.
##     (If no file is produced, set this empty.)  Default: ``$.s``.
##
## .. prop:: version_out
##
##     Name of the file that a ``version`` invocation will produce, if any.
##     Default: empty (no file expected).
##
## .. prop:: c1989
##           c1999
##           c2011
##
##     Command line options to select the indicated level of the C
##     standard.  If a level is not supported, set the appropriate
##     option to "``no``"; if it is the default, set it to the empty
##     string.  If it is not possible to select a conformance level
##     without also indicating whether *strict* conformance is
##     required, provide both sets of options, separated by a
##     :kbd:`|`, in the order :samp:`{extended} | {strict}`.  The
##     default for ``c1989`` is empty, and the defaults for ``c1999``
##     and ``c2011`` are "``no``".  Thus, if you have a compiler that
##     supports C1999 *only*, you must specify both ``c1989=no`` and
##     ``c1999=``.
##
## .. prop:: conform
##
##     Command line options to put this compiler in a mode in which it
##     is strictly conformant with its default level of the C
##     standard.  If there is no such mode, or it is the default,
##     leave this unset.  Do *not* request conformance with any
##     specific level of the standard in this set of options; only
##     disable extended features.  If the only options that have this
##     effect also select a specific standard level, leave this unset
##     and use ``|``-separated groups of options in the
##     :samp:`c{YYYY}` sets as mentioned above.  The default is unset.
##
## .. prop:: threads
##
##     Command line options to enable support for multithreading.
##     These will only be used if :file:`pthread.h` cannot be compiled
##     without them.  The default is unset.
##
## Finally, these properties are optional, but should be set if possible:
##
## .. prop:: dump_macros
##
##     If it is possible to make your compiler dump out the complete
##     set of ``#define``\d macros after preprocessing, set this to the
##     appropriate set of options.  Will be used in conjunction with
##     the ``preproc`` options.  This is used only for diagnostics of
##     not-fully-configured operating systems, so it is not required.

[DEFAULT]
# These are good for any Unixy compiler (with exceptions as noted below)
define      = -D
preproc     = -E -o $.i
compile     = -S -o $.s
preproc_out = $.i
compile_out = $.s
version_out =
threads     =
conform     =
c1989       =
c1999       = no
c2011       = no
notfound_re = No\ such\ file\ or\ directory
errloc_re   = ^(?P<file>[^:]+) :(?P<line>\d+) :(?:\d+:)?\ (?:error|warning):
dump_macros =

[gcc]
imitated  = yes
id_macro  = __GNUC__

# Under some conditions the string "gcc" does not appear anywhere in
# gcc's --version output, so look instead for the "Copyright YYYY
# Free Software Foundation" blurb.
id_regexp =
  ^\S+\s+
    (?:\((?P<details1>[^)]+)\))?\s+
    (?P<version>[0-9.]+)\s*
    (?:\(?(?P<details2>.+?)\)?)?
  \nCopyright\ .+?\ Free\ Software\ Foundation\b

# Note: nearly the same as clang
version     = --version
compile     = -fsyntax-only -Wall -Wextra -pedantic -Werror
              -Wno-unknown-pragmas -Wno-deprecated-declarations
compile_out =
c1989       = -std=gnu89 | -std=c89
c1999       = -std=gnu99 | -std=c99
c2011       = -std=gnu11 | -std=c11
threads     = -pthread
dump_macros = -dM

[clang]
id_macro  = __clang__
id_regexp = (?:\bclang\ version\ (?P<version1>[0-9.-]+)|
               \bbased\ on\ LLVM\ (?P<version2>[0-9.-]+))
            .*?
            \bTarget:\s+(?P<details>[a-zA-Z0-9_-]+)
notfound_re = file\ not\ found

# Note: nearly the same as GCC
version     = --version
compile     = -fsyntax-only -ferror-limit=0 -Wall -Wextra -pedantic -Werror
              -Wno-unknown-pragmas -Wno-deprecated-declarations
compile_out =
c1989       = -std=gnu89 | -std=c89
c1999       = -std=gnu99 | -std=c99
c2011       = -std=gnu11 | -std=c11
threads     = -pthread
dump_macros = -dM

[hp_acc]
id_macro    = __HP_cc
id_regexp   = ^\S+:\ HP\ C/aC\+\+\ (?P<details>[A-Z0-9]+)
                                 \ (?P<version>[A-Z0-9.]+)
notfound_re = cannot\ open\ source\ file
errloc_re   = ^"(?P<file> .+? )",\ line\ (?P<line> \d+ ):

# some versions of HP cc won't print their version info unless you
# give them something to compile
version     = -V -c $.i
version_out = $.o

# There appears to be no option that suppresses object code
# generation.  -S emits an assembly listing *in addition to* the
# regular output.
compile     = -c +p +w +We -o $.o
compile_out = $.o

conform     = +strict
c1989       = -AC89
c1999       = -AC99
threads     = -mt
dump_macros = -dM

[mipspro]
id_macro    = _SGI_COMPILER_VERSION
id_regexp   = ^MIPSpro\ Compilers:\ Version\ (?P<version>[0-9.]+)$
version     = -version

notfound_re = The\ source\ file\ ".*"\ is\ unavailable\.
errloc_re   = (?:ERROR|WARNING)\ File\ =\ (?P<file> .+? ),
                               \ Line\ =\ (?P<line> \d+ )

# -S is documented to ignore -o (!) so we can't use it.
# Diagnostic 1552 is "variable set but not used", which triggers
# on IRIX regexp.h, and cannot be suppressed any other way.
compile     = -n32 -brief_diagnostics -fullwarn -diag_error 1-10000
              -diag_suppress 1552 -c -o $.o
compile_out = $.o

conform     = -ansi -ansiE
c1999       = -c99

[sunpro]
id_macro    = __SUNPRO_C
id_regexp   = ^\S+:\ Sun\ C\ (?P<version>[0-9.]+)\s*(?P<details>.+)?$
notfound_re = cannot\ find\ include\ file
errloc_re   = ^"(?P<file> .+? )",\ line\ (?P<line> \d+ ):

version         = -V
# E_OLD_STYLE_FUNC_DECL triggers on e.g. any use of SIG_DFL.
# It would be nice to label that "incorrect", but we can't
# practically distinguish "incorrect" from "missing" for constants,
# and "missing" would give the wrong impression.
compile         = -xe -v
                  -errfmt=error -errwarn=%all -errtags=yes
                  -erroff=E_OLD_STYLE_FUNC_DECL
                  -erroff=E_UNRECOGNIZED_PRAGMA_IGNORED
compile_out     =
conform         = -Xc -fd -features=no%extensions -features=no%typeof
c1989           = -xc99=none
c1999           = -xc99=all
threads         = -mt=yes
dump_macros     = -E -xdumpmacros=defs,undefs,sys

[msvc]
id_macro  = _MSC_VER
id_regexp = ^Microsoft .* Compiler\ Version\ (?P<version>\d+\.\d+)
errloc_re = ^(?P<file> [^(]+)\((?P<line> \d+)\)\ :

preproc     = /nologo /P
preproc_out = $.i
# Warning 4068 is "unknown pragma".
# Warning 4001 is "nonstandard extension used", which triggers extensively
# on MSVC's own headers, *headdesk*.
# Warning 4820 is "padding after data member", which triggers harmlessly
# on some of the content-test code.
# Warning 4710 is "function not inlined", which also triggers harmlessly
# on some of the content tests.
# Warning 4255 is "no function prototype given", which various internal-use
# declarations in older MSVCRT headers trip.
# Warning 4668 is "'token' not defined as a preprocessor macro in #if",
# which, again, various older MSVCRT headers trip.
compile     = /nologo /c /W4 /Wall /WX /WL
              /wd4068 /wd4001 /wd4820 /wd4710 /wd4255 /wd4668
compile_out = $.obj
define      = /D

version     = /c $.c
version_out = $.obj
conform     = /Za
