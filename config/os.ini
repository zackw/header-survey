# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This file describes operating systems.  Note that what we care about most is
# the identity of the C runtime, not the kernel; for instance, we know how to
# identify GNU libc, but do not bother distinguishing Linux from the Hurd.

# Each section (except META, far below) names one OS, and should have all of
# the following properties:
#
# category:   The design family to which the OS belongs.
# label:      The human-readable official label for the OS.
#
# id_expr:    An #if expression which is true on this OS, and only on this OS.
# version_detector:
#             C source code which, when preprocessed, will produce exactly one
#             line of the form "VERSION=<number>".  The <number> should be in
#             the usual x.y or x.y.z format.  All whitespace and quotation
#             marks on the line will be stripped out.  If it is not possible
#             to detect the version number of the C runtime and/or operating
#             system by preprocessing a source file, leave this property
#             unset.  #include <errno.h> is automatically prepended to the
#             code.
# version_adjust:
#             A complete definition of a Python function, also named
#             'version_adjust', which takes one argument, the version number
#             (without VERSION=, whitespace, or quotation marks) generated by
#             'version_detector', and rewrites it however is appropriate.  You
#             might wish to truncate it to fewer components, add a leading
#             component, or change some of the numbers to reflect how people
#             actually refer to the OS, for instance.  If this property is
#             unset, the <number> from version_detector is used verbatim.
#             Put a vertical bar at the beginning of each line to make sure
#             the indentation is preserved.
#
# max_features_macros:
#             Space-separated list of macro definitions (in command line
#             NAME=VALUE format, but without the leading -D) to make in order
#             to enable as many library features as possible.  Omit if there
#             are no such macro(s).
# max_features_std:
#             If the library mode enabled by 'max_features_macros' requires at
#             least a specific level of C standard conformance to work
#             correctly, set this to 'c1989', 'c1999', or 'c2011' as
#             appropriate.

[linux_glibc]
category = Linux
label = GNU libc
id_expr = defined __linux__ && defined __GLIBC__
version_detector =
  VERSION=__GLIBC__.__GLIBC_MINOR__
# version_adjust not needed
max_features_macros = _GNU_SOURCE

[osx]
category = Commercial Unix
label    = MacOS X
id_expr  = defined __MACH__ && defined __APPLE__
version_detector =
   /* This is not precisely what we want but it is close enough. */
   VERSION=__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
version_adjust =
   |def version_adjust(rawver):
   |    major, minor = divmod(int(rawver), 100)
   |    minor, patch = divmod(minor, 10)
   |    return "%d.%d" % (major, minor)
max_features_macros = _DARWIN_C_SOURCE

[META]
# This rather large regexp cuts down on the amount of junk that gets
# printed when we can't identify the operating system using the
# mechanisms above.  It is not necessary to add every uninteresting
# macro to the list, but it is helpful to weed out entire families of
# junk as they come up.
not_system_id_macros = ^(?: [A-Za-z] | _[a-z0-9] |
  _(?:
    [A-Z0-9_]+_(?:T|H_?|SOURCE)$ |
    DARWIN_FEATURE |
    LP64$ |
    USE_FORTIFY_LEVEL$ ) |
  __(?:
      [A-Z0-9_]+_(?:T|H_?|SOURCE)$
    | ATOMIC_
    | (?:BEGIN|END)_(?:DECLS$|NAMESPACE_)
    | (?:FLT|DBL|LDBL|DEC[0-9]*)
      _(?:TYPE|(?:DECIMAL_|MANT_)?DIG|HAS_(?:DENORM|INFINITY|QUIET_NAN)
          |(?:DENORM|SUBNORMAL)_MIN|(?:MIN|MAX)(?:_(?:10_)?EXP)?
          |DEN|EPSILON|EVAL_METHOD)__$
    | ([UW]?INT(?:MAX|PTR|(?:_FAST|_LEAST)?[0-9]+)?
       |U?LONG(?:_LONG)?|U?SHRT|[USW]?CHAR[0-9]*
       |SIZE|PTRDIFF|SIG_ATOMIC)
      _(?:C(?:_SUFFIX)?|MAX|MIN|TYPE|WIDTH) (?:__)?$
    | (?:ORDER_)?(?:BIG|LITTLE|PDP)_ENDIAN(?:__)?$
    | ASMNAME[0-9]*$
    | BIGGEST_ALIGNMENT__$
    | BLOCKS__$
    | BYTE_ORDER__$
    | CAST_AWAY_QUALIFIER$
    | CHAR_BIT__$
    | CONCAT$
    | CONSTANT_CFSTRINGS__$
    | COPYRIGHT$
    | DECIMAL_DIG__$
    | DECIMAL_BID_FORMAT__
    | DYNAMIC__$
    | ELF__$
    | FINITE_MATH_ONLY__$
    | FLOAT_WORD_ORDER__$
    | FLT_RADIX__$
    | GCC_
    | GNUC_
    | GXX_
    | IDSTRING$
    | KERNEL_STRICT_NAMES$
    | LP64(?:__)?$
    | LDBL_REDIR
    | MMX(?:__)?$
    | NO_INLINE__$
    | NO_MATH_INLINES$
    | NTH$
    | P$
    | PIC(?:__)?$
    | PMT$
    | POINTER_WIDTH(?:__)?$
    | PRAGMA_REDEFINE_EXTNAME$
    | PROJECT_VERSION$
    | RCSID$
    | REDIRECT
    | REGISTER_PREFIX(?:__)?$
    | SCCSID$
    | SIZEOF_
    | SSE[0-9]*(?:_MATH)?(?:__)?$
    | SSP(?:__)?$
    | SSSE[0-9]*(?:_MATH)?(?:__)?$
    | STDC_
    | STRING$
    | THROW$
    | USER_LABEL_PREFIX(?:__)?$
    | USE_
    | USING_NAMESPACE_
    | VERSION__$
    | WORDSIZE(?:_COMPAT32)?$
    | (?:extern_)?(?:always_)?inline$
    | amd64(?:__)?$
    | attribute_
    | block(?:__)?$
    | bos[0-9]*
    | bounded
    | clang_
    | code_model_
    | const(?:__)?$
    | core2(?:__)?$
    | dead[0-9]*(?:__)?$
    | deprecated(?:__)?$
    | errordecl
    | flexarr
    | (?:gnu_)?linux(?:__)?
    | i[0-9]+86(?:__)?$
    | k8(?:__)?$
    | llvm(?:__)?$
    | long_double_t$
    | nocona(?:__)?$
    | nonnull$
    | pentium
    | pic(?:__)?$
    | printflike(?:__)?$
    | ptr_t$
    | ptrvalue$
    | pure[0-9]*(?:__)?$
    | restrict(?:__)?$
    | restrict_arr$
    | scanflike(?:__)?$
    | signed(?:__)?$
    | strong(?:__)?$
    | stub_
    | tune_
    | unix(?:__)?$
    | unbounded$
    | unsafe_unretained$
    | unused(?:__)?$
    | va_arg_
    | volatile(?:__)?$
    | warn
    | weak(?:__)?$
    | wur$
    | x86_64(?:__)?$
  ))
