# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This file specifies errors.  "Errors", in this case, means a
# situation where a header fails to compile in isolation, and this is
# not correctable by either of the techniques offered in prereqs.ini.
# An error is not necessarily a bug; one of the most commonly
# encountered errors is that modern versions of GCC don't support
# <varargs.h>, but do so by shipping a stub header that
# unconditionally fails the compilation, rather than by omitting the
# header altogether.
#
# There is one section per error.  The section name is the codeword
# that will be written to the inventory as a $E line.  There are two
# required entries in each section: "regexp" specifies a regular
# expression used to detect the error, and "desc" is an HTML fragment
# that will be used to describe the error in the generated table (this
# should be a complete sentence).
#
# Regular expressions use the syntax understood by Python 2.0:
# http://docs.python.org/release/2.0/lib/re-syntax.html
#
# All regular expressions are compiled in VERBOSE mode, which means:
#
#   Whitespace within the pattern is ignored, except when in a
#   character class or preceded by an unescaped backslash, and, when a
#   line contains a "#" neither in a character class or preceded by an
#   unescaped backslash, all characters from the leftmost such "#"
#   through the end of the line are ignored.
#
# and then applied using re.search() to each individual line of the
# diagnostics, in isolation.  The first match wins.
#
# Most errors occur only in one specific header.  If you provide a
# "header" entry, its value is a space-separated list of headers, and
# the error will be considered only for those headers.

# generic problems
[c1999_required]
regexp = \#error\b .* \b[cC](?:19)?99\b
desc =
  This header file issues an <code>#error</code> if it is included in
  a C1989-mode compilation.

[legacy_type_decls]
regexp =
  \b(?:(?:quad|fsid|daddr|caddr|u_(?:int(?:8|16|32|64)|quad))_t
      |u_?(?:char|short|int|long)
      |n_?(?:short|long|time))\b
desc =
  Uses legacy typedefs that <code>sys/types.h</code> does not provide
  in conformance mode.

[long_long_unavailable]
regexp =
  (?: \blong\ long\b .*
      \b(?: extension | nonstandard | not\ support | not\ allowed )\b |
      \b(?: extension | nonstandard | not\ support | not\ allowed )\b .*
      \blong\ long\b )
desc =
  Uses <q><code>long long</code></q>, which is not allowed in strict C1989
  conformance mode.

[int64_t_unavailable]
regexp = \bu?int64_t\b
desc =
  Uses <q><code>int64_t</code></q> or <q><code>uint64_t</code></q>, which
  are not available in strict C1989 conformance mode.

[sys_queue_macros]
regexp = \b(
    CIRCLEQ_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_REVERSE)?)
             | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD|TAIL))
             | L(?:AST|OOP_(?:NEXT|PREV))|NEXT|PREV|REMOVE)
  | LIST_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)|HEAD(?:_INITIALIZER)?
          | IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD))|NEXT|REMOVE)
  | QUEUEDEBUG_(?:CIRCLEQ_(?:ELM|HEAD|POSTREMOVE)
                | LIST_(?:INSERT_HEAD|OP|POSTREMOVE)
                | TAILQ_(?:INSERT_(?:HEAD|TAIL)|OP|P(?:(?:OST|RE)REMOVE)))
  | S(?:IMPLEQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
                | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD|TAIL))
                | LAST|NEXT|REMOVE(?:_HEAD)?)
      | LIST_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
              | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD))
              | NEXT|REMOVE(?:_(?:AFTER|HEAD))?)
      | TAILQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
               | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD|TAIL))
               | LAST|NEXT|REMOVE(?:_HEAD)?))
  | TAILQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)
           | F(?:IRST|OREACH(?:_(?:(?:REVERS(?:E_SAF)?|SAF)E))?)
           | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD|TAIL))
           | LAST|NEXT|PREV|REMOVE)
  | _TAILQ_(?:ENTRY|HEAD)
 )\b
desc =
  Uses structure-defining macros from <code>sys/queue.h</code> without
  including it.

# problems with specific headers
[varargs_unimpl]
header = varargs.h
regexp = \#error\b .* \bstdarg\.h\b
desc =
  Explicitly unimplemented: contains only an <code>#error</code> directive
  telling the programmer to use <code>stdarg.h</code> instead.

[malloc_unimpl]
header = malloc.h
regexp = \#error\b .* \bstdlib\.h\b
desc =
  Explicitly unimplemented: contains only an <code>#error</code> directive
  telling the programmer to use <code>stdlib.h</code> instead.

[ucontext_deprecated]
header = ucontext.h sys/ucontext.h
regexp = \#error\b .* \bdeprecated\b
desc =
  This header is deprecated on this OS; it issues an <code>#error</code>
  if it is used without defining <code>_XOPEN_SOURCE</code>.

[ucontext_stack_t]
header = ucontext.h sys/ucontext.h thread_db.h sys/socketvar.h
regexp = stack_t
desc =
  This header makes unconditional use of <code>stack_t</code>, which is only
  available from <code>signal.h</code> if XSI extensions are enabled.

[sys_ipc_req_svid]
header = sys/ipc.h sys/msg.h sys/sem.h sys/shm.h
regexp = \bmust\ be\ compiled\b .* \b_XOPEN_SOURCE\b
desc =
  This header issues a <code>#warning</code> if it is used without
  defining <code>_XOPEN_SOURCE</code>. No rationale is available.

[sys_dir_deprecated]
header = sys/dir.h
regexp = \#warning\b .* \bdirent\.h\b
desc =
  This obsolete header generates an unconditional <code>#warning</code>
  telling the programmer to use <code>dirent.h</code> instead.

[old_terminal_api_deprecated]
header = sys/termios.h sgtty.h
regexp = \#warning\b .* \btermios\.h\b
desc =
  This obsolete header generates an unconditional <code>#warning</code>
  telling the programmer to use <code>termios.h</code> instead.

[sys_timeb_deprecated]
header = sys/timeb.h
regexp = \#warning\b .* \bdeprecated\b
desc =
  This header generates an unconditional <code>#warning</code>s telling
  the programmer that it is obsolete.

[complex_types_unavailable]
header = complex.h tgmath.h
regexp = \b_Complex\b
desc =
  This header unconditionally relies on the C1999 <code>_Complex</code>
  type, which may be unavailable when strict C1989 conformance is requested.

[sys_socketvar_sotimeq_hash]
header = sys/socketvar.h
regexp = array\ type\ has\ incomplete\ element\ type
desc =
  Attempts to declare <code>extern struct sotimeq sotimeq_hash[];</code>
  with <code>struct sotimeq</code> an incomplete type; this is invalid.
  The necessary structure definition is immediately below the offending
  declaration.

[rpc_netbuf]
header = rpc/auth.h rpc/auth_des.h rpc/auth_unix.h rpc/clnt.h
         rpc/key_prot.h rpc/pmap_clnt.h rpc/rpc.h rpc/rpc_msg.h
         rpc/svc.h rpc/svc_auth.h rpcsvc/sm_inter.h rpcsvc/yppasswd.h
regexp = field\ .[a-z0-9_]+.\ has\ incomplete\ type
desc =
  Declares structure fields of type <code>struct netbuf</code>, which is
  available from <code>sys/xti.h</code>, but not in conformance mode.

[rpcsvc_mount_fhandle_t]
header = rpcsvc/mount.h
regexp = fhandle_t
desc =
  Contains declarations depending on a typedef, <code>fhandle_t</code>,
  which is only defined in what appear to be private kernel headers.
  Other OSes define this type in this header.

[regexp_return_makes_pointer]
header = regexp.h
regexp = return\ makes\ pointer\ from\ integer\ without\ a\ cast
desc =
  Incorrect use of <code>RETURN()</code> instead of <code>ERROR()</code>
  in the embedded code in this header.

[regex_static_or_type_qualifiers]
header = regex.h
regexp = static\ or\ type\ qualifiers\ in\ abstract\ declarator
desc =
  Older versions of GCC do not understand a declarator containing
  <code>[restrict]</code>.

[nameser_duplicate_members]
header = arpa/nameser_compat.h arpa/nameser.h resolv.h
regexp = duplicate\ member\ .(?:rd|tc|aa|opcode|qr|rcode|cd|ad|unused|ra)
desc =
  Structure definition depending on unprefixed <code>BYTE_ORDER</code>,
  which is not available in conformance mode.

[net_needs_sockaddr_storage]
header = net/if.h netinet/if_ether.h
regexp = \bincomplete\b .*
         \b(?:lnr_addr|sa_addr|slr_src|slr_grp|ifi_lastchange|ifta_[sd]addr)\b
       | \b(?:lnr_addr|sa_addr|slr_src|slr_grp|ifi_lastchange|ifta_[sd]addr)\b
         .* \bincomplete\b
desc =
  Structure definition depending on <code>struct sockaddr_storage</code>,
  which is provided by <code>sys/socket.h</code>, but unavailable in
  conformance mode (because this system does not conform to POSIX.1-2001).

[net_needs_in6_addr]
header = netinet/icmp6.h netinet/ip6.h
regexp = \bincomplete\b .*
         \b(?:icmp6m_group|nd_(?:(?:ns|na|rd)_target|rd_dst|opt_pi_prefix)
              |ip6_(?:src|dst))\b
       | \b(?:icmp6m_group|nd_(?:(?:ns|na|rd)_target|rd_dst|opt_pi_prefix)
              |ip6_(?:src|dst))\b
         .* \bincomplete\b
desc =
  Structure definition depending on <code>struct in6_addr</code>,
  which is provided by <code>netinet/in.h</code>, but unavailable in
  conformance mode (because this system does not conform to POSIX.1-2001).

[netinet_if_ether_ac_if_incomplete]
header = netinet/if_ether.h
regexp = \bincomplete\b.*\bac_if\b|\bac_if\b.*incomplete\b
desc =
  Structure definition depending on <code>struct ifnet</code>, which is
  provided by <code>net/if.h</code>, but unavailable in conformance mode.

[protocols_timed_MAXHOSTNAMELEN_unavailable]
header = protocols/timed.h
regexp = \bMAXHOSTNAMELEN\b
desc =
  Depends on the constant <code>MAXHOSTNAMELEN</code>, which is provided
  by <code>netdb.h</code>, but unavailable in conformance mode.

# This is really vague because the error message doesn't tell us what the
# offending type is.  In the currently known case, the problem is that
# signal.h doesn't provide sigset_t if strict C89 conformance is requested
# (absent further -D_SOMETHING_SOURCE settings).
[syntax_error_before_star]
header = pthread.h poll.h rpc/rpc.h
regexp = \bbefore\ '\*' | \bbefore\ or\ at:\ \*
desc =
  In some compilation modes, the compiler issues a vague error message,
  similar to <q>syntax error before <q><code>*</code></q>.</q> This is
  probably because the header expects a <code>typedef</code> name to be
  unconditionally available, but the header that defines that name only
  does so in some modes.

# Similarly, the known case of this issue is due to "inline" being used
# without any defensiveness against strict C89 conformance, but the error
# message does not reveal this.
[syntax_error_before_const]
header = ctype.h wchar.h wctype.h iconv.h net/route.h
regexp = \bbefore\ 'const' | \bbefore\ or\ at: const
desc =
  In some compilation modes, the compiler issues a vague error message,
  similar to <q>syntax error before <q><code>const</code></q>.</q> The
  actual problem is likely to be with the token preceding the
  <code>const</code>, e.g. this can happen if the C1999 keyword
  <code>inline</code> is encountered in strict C1989 conformance mode, or
  the runtime assumes that the compiler supports a C2011 feature it doesn't
  (e.g. <code>_Thread_local</code>).

[sys_procfs_sigaltstack_unavailable]
header = sys/procfs.h
regexp = \bincomplete\b.*\bpr_altstack\b|\bpr_altstack\b.*\bincomplete\b
desc =
  Depends on <code>struct sigaltstack</code>, a compatibility name for
  <code>stack_t</code>, which is provided by <code>signal.h</code>, but
  unavailable in conformance mode.

[sys_socketvar_kernel_types_unavailable]
header = sys/socketvar.h
regexp = \b(?:kfpu|label|pgcnt|kt|mblk)_t\b
desc =
  Indirectly depends on type definitions for kernel-internal structures,
  which are unavailable in conformance mode.

[sys_user_MAXSIG_unavailable]
header = sys/user.h
regexp = \bMAXSIG\b
desc =
  Depends on the constant <code>MAXSIG</code>, which is provided
  by <code>signal.h</code>, but unavailable in conformance mode.

[resolver_bitypes]
header = resolv.h arpa/nameser.h
regexp = \bsys/bitypes\.h\b
desc =
  Attempts to include <code>sys/bitypes.h</code>, which does not exist,
  because a preprocessor conditional relies on system-identification
  macros that pollute the user namespace and so are unavailable in
  conformance mode.

[nonstandard_bitfield]
header = sys/acct.h sys/mtio.h
regexp = non-standard\ for\ a\ bit\ field
desc =
  In strict conformance mode, the MIPSpro compiler objects to use of
  <code>char</code> and/or <code>enum</code> types as a bitfield.
