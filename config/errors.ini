# -*- encoding: utf-8 -*-

# Copyright 2013-2014 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

## Errors
## ------
##
## This file records all known "errors."  Errors are situations where
## a header file fails to compile, and this is not correctable by
## either of the techniques offered in :file:`prereqs.ini`. These
## situations are not necessarily bugs in the compiler or runtime;
## some older headers are stubbed out by modern compilers (containing
## only an ``#error`` directive), and some newer headers depend on
## constructs that are not part of C1989.
##
## There is one section per error.  The section name is the codeword
## that will be written to the inventory on an ``errors=`` line for
## the offending header.  There are two required entries in each
## section, and one optional entry:
##
## .. prop:: regexp
##
##    A regular expression used to detect the error.
##
##    All of the relevant regular expressions are applied to each
##    individual line of diagnostics produced by the compiler; the
##    first match wins.
##
## .. prop:: desc
##
##    Human-readable text describing the error.  Please write complete
##    sentences.
##
## .. prop:: header
##
##    Optionally, a space-separated list of headers.  If present, this
##    error will only be considered when probing those headers.
##    Otherwise, the error potentially applies to *all* headers.
##    (Most errors occur only in a small, predictable set of headers;
##    use of ``header`` is encouraged.)

# generic problems
[c1999_required]
regexp = \#error\b .* \b[cC](?:19)?99\b
desc =
  This header file issues an ``#error`` if it is included in
  a C1989-mode compilation.

[legacy_type_decls]
regexp =
  \b(?:(?:quad|fsid|daddr|caddr|u_(?:int(?:8|16|32|64)|quad))_t
      |u_?(?:char|short|int|long)
      |n_?(?:short|long|time))\b
desc =
  |This header unconditionally uses one or more of these deprecated
  |integer typedefs:
  |
  |.. hlist::
  |   :columns: 4
  |
  |   * ``caddr_t``
  |   * ``daddr_t``
  |   * ``fsid_t``
  |   * ``quad_t``
  |   * ``u_int_t``
  |   * ``u_quad_t``
  |   * ``u_int16_t``
  |   * ``u_int32_t``
  |   * ``u_int64_t``
  |   * ``u_int8_t``
  |   * ``u_char``
  |   * ``u_short``
  |   * ``u_int``
  |   * ``u_long``
  |   * ``n_short``
  |   * ``n_long``
  |   * ``n_time``
  |
  |:file:`sys/types.h` would provide these typedefs, but does not when strict
  |ISO C conformance is enabled.

[long_long_unavailable]
regexp =
  (?: \blong\ long\b .*
      \b(?: extension | nonstandard | not\ support | not\ allowed )\b |
      \b(?: extension | nonstandard | not\ support | not\ allowed )\b .*
      \blong\ long\b )
desc =
  This header uses "``long long``," which is not allowed in strict C1989
  conformance mode.

[int64_t_unavailable]
regexp = \bu?int64_t\b
desc =
  This header uses "``int64_t``" and/or "``uint64_t``," which are not
  available in strict C1989 conformance mode.

[sys_queue_macros]
regexp = \b(
    CIRCLEQ_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_REVERSE)?)
             | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD|TAIL))
             | L(?:AST|OOP_(?:NEXT|PREV))|NEXT|PREV|REMOVE)
  | LIST_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)|HEAD(?:_INITIALIZER)?
          | IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD))|NEXT|REMOVE)
  | QUEUEDEBUG_(?:CIRCLEQ_(?:ELM|HEAD|POSTREMOVE)
                | LIST_(?:INSERT_HEAD|OP|POSTREMOVE)
                | TAILQ_(?:INSERT_(?:HEAD|TAIL)|OP|P(?:(?:OST|RE)REMOVE)))
  | S(?:IMPLEQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
                | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD|TAIL))
                | LAST|NEXT|REMOVE(?:_HEAD)?)
      | LIST_(?:E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
              | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD))
              | NEXT|REMOVE(?:_(?:AFTER|HEAD))?)
      | TAILQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)|F(?:IRST|OREACH(?:_SAFE)?)
               | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|HEAD|TAIL))
               | LAST|NEXT|REMOVE(?:_HEAD)?))
  | TAILQ_(?:CONCAT|E(?:(?:MPT|NTR)Y)
           | F(?:IRST|OREACH(?:_(?:(?:REVERS(?:E_SAF)?|SAF)E))?)
           | HEAD(?:_INITIALIZER)?|IN(?:IT|SERT_(?:AFTER|BEFORE|HEAD|TAIL))
           | LAST|NEXT|PREV|REMOVE)
  | _TAILQ_(?:ENTRY|HEAD)
 )\b
desc =
  |This header uses structure-defining macros from :file:`sys/queue.h` without
  |including it.
  |
  |.. note::
  |
  |   We treat this as an error, not a dependency, because
  |   :file:`sys/queue.h` is dangerous: it was never intended to be
  |   included by user-space programs, so it is not part of any
  |   standard, its contents are variable even among those platforms
  |   where it exists, and it pollutes the user namespace.  Worse,
  |   some programs contain local copies of some version of it, and
  |   these have a good chance of being incompatible with system
  |   headers that use it.

# problems with specific headers
[varargs_unimpl]
header = varargs.h
regexp = \#error\b .* \bstdarg\.h\b
desc =
  This header is unimplemented: it contains only an ``#error`` directive
  telling the programmer to use :file:`stdarg.h` instead.

[malloc_unimpl]
header = malloc.h
regexp = \#error\b .* \bstdlib\.h\b
desc =
  This header is unimplemented: it contains only an ``#error`` directive
  telling the programmer to use :file:`stdlib.h` instead.

[ucontext_deprecated]
header = ucontext.h sys/ucontext.h
regexp = \#error\b .* \bdeprecated\b
desc =
  This header is deprecated on this OS; it issues an ``#error``
  if it is used without defining ``_XOPEN_SOURCE``.

[ucontext_stack_t]
header = ucontext.h sys/ucontext.h thread_db.h sys/socketvar.h
regexp = stack_t
desc =
  This header makes unconditional use of ``stack_t``, which is only
  available from :file:`signal.h` if XSI extensions are enabled.

[sys_ipc_req_svid]
header = sys/ipc.h sys/msg.h sys/sem.h sys/shm.h
regexp = \bmust\ be\ compiled\b .* \b_XOPEN_SOURCE\b
desc =
  This header issues a ``#warning`` if it is used without
  defining ``_XOPEN_SOURCE``. No rationale is given.

[sys_dir_deprecated]
header = sys/dir.h
regexp = \#warning\b .* \bdirent\.h\b
desc =
  This obsolete header generates an unconditional ``#warning``
  telling the programmer to use :file:`dirent.h` instead.

[old_terminal_api_deprecated]
header = sys/termios.h sgtty.h
regexp = \#warning\b .* \btermios\.h\b
desc =
  This obsolete header generates an unconditional ``#warning``
  telling the programmer to use :file:`termios.h` instead.

[sys_timeb_deprecated]
header = sys/timeb.h
regexp = \#warning\b .* \bdeprecated\b
desc =
  This header generates an unconditional ``#warning`` telling
  the programmer that it is obsolete.

[complex_types_unavailable]
header = complex.h tgmath.h
regexp = \b_Complex\b
desc =
  This header unconditionally relies on the C1999 ``_Complex`` type,
  which may be unavailable when strict C1989 conformance is requested.

[sys_socketvar_sotimeq_hash]
header = sys/socketvar.h
regexp = array\ type\ has\ incomplete\ element\ type
desc =
  This header attempts to declare ``extern struct sotimeq sotimeq_hash[];``
  with ``struct sotimeq`` an incomplete type; this is invalid.
  The necessary structure definition is immediately below the offending
  declaration.

[rpc_netbuf]
header = rpc/auth.h rpc/auth_des.h rpc/auth_unix.h rpc/clnt.h
         rpc/key_prot.h rpc/pmap_clnt.h rpc/rpc.h rpc/rpc_msg.h
         rpc/svc.h rpc/svc_auth.h rpcsvc/sm_inter.h rpcsvc/yppasswd.h
regexp = field\ .[a-z0-9_]+.\ has\ incomplete\ type
desc =
  This header declares structure fields of type ``struct netbuf``, which is
  available from :file:`sys/xti.h`, but not in conformance mode.

[rpcsvc_mount_fhandle_t]
header = rpcsvc/mount.h
regexp = fhandle_t
desc =
  This header contains declarations depending on a typedef, ``fhandle_t``,
  which is only defined in what appear to be private kernel headers.
  Other OSes define this type in this header.

[regexp_return_makes_pointer]
header = regexp.h
regexp = return\ makes\ pointer\ from\ integer\ without\ a\ cast
desc =
  The embedded code in this header contains an erroneous use of
  ``RETURN()`` instead of ``ERROR()``.

[regex_static_or_type_qualifiers]
header = regex.h
regexp = static\ or\ type\ qualifiers\ in\ abstract\ declarator
desc =
  This header contains a function declaration whose prototype contains
  "``[restrict]``."  Older versions of GCC do not understand this construct.

[nameser_duplicate_members]
header = arpa/nameser_compat.h arpa/nameser.h resolv.h
regexp = duplicate\ member\ .(?:rd|tc|aa|opcode|qr|rcode|cd|ad|unused|ra)
desc =
  This header makes unconditional use of the macro ``BYTE_ORDER``,
  which is not defined when compiling in a strict conformance mode.

[net_needs_sockaddr_storage]
header = net/if.h netinet/if_ether.h
regexp = \bincomplete\b .*
         \b(?:lnr_addr|sa_addr|slr_src|slr_grp|ifi_lastchange|ifta_[sd]addr)\b
       | \b(?:lnr_addr|sa_addr|slr_src|slr_grp|ifi_lastchange|ifta_[sd]addr)\b
         .* \bincomplete\b
desc =
  This header assumes that ``struct sockaddr_storage`` is defined.
  That type should be provided by :file:`sys/socket.h`, but is unavailable
  when compiling in a strict conformance mode (because this
  system does not conform to POSIX.1-2001).

[net_needs_in6_addr]
header = netinet/icmp6.h netinet/ip6.h
regexp = \bincomplete\b .*
         \b(?:icmp6m_group|nd_(?:(?:ns|na|rd)_target|rd_dst|opt_pi_prefix)
              |ip6_(?:src|dst))\b
       | \b(?:icmp6m_group|nd_(?:(?:ns|na|rd)_target|rd_dst|opt_pi_prefix)
              |ip6_(?:src|dst))\b
         .* \bincomplete\b
desc =
  This header assumes that ``struct in6_addr`` is defined.  That type
  should be provided by :file:`netinet/in.h`, but is unavailable when
  compiling in a strict conformance mode (because this system does not
  conform to POSIX.1-2001).

[netinet_if_ether_ac_if_incomplete]
header = netinet/if_ether.h
regexp = \bincomplete\b.*\bac_if\b|\bac_if\b.*incomplete\b
desc =
  This header assumes that ``struct ifnet`` is defined.
  That type is normally provided by :file:`net/if.h`, but
  is unavailable when compiling in a strict conformance mode.

[protocols_timed_MAXHOSTNAMELEN_unavailable]
header = protocols/timed.h
regexp = \bMAXHOSTNAMELEN\b
desc =
  This header assumes that ``MAXHOSTNAMELEN`` is defined.  That
  constant is normally provided by :file:`netdb.h`, but is unavailable
  in strict conformance mode.

# This is really vague because the error message doesn't tell us what the
# offending type is.  In the currently known case, the problem is that
# signal.h doesn't provide sigset_t if strict C89 conformance is requested
# (absent further -D_SOMETHING_SOURCE settings).
#
# Markup note: sphinx calls smartypants with inadequate context to know that
# the single quote after the ``*`` is a close quote; the easiest fix is to
# supply smart quotes manually.
[syntax_error_before_star]
header = pthread.h poll.h rpc/rpc.h
regexp = \bbefore\ '\*' | \bbefore\ or\ at:\ \*
desc =
  In some compilation modes, the compiler issues a vague error
  message, similar to “syntax error before ‘``*``’.” This is probably
  because the header expects a ``typedef`` name to be unconditionally
  available, but the header that defines that name only does so in
  some modes.

# Similarly, the known case of this issue is due to "inline" being used
# without any defensiveness against strict C89 conformance, but the error
# message does not reveal this.
#
# Markup note: sphinx calls smartypants with inadequate context to know that
# the single quote after the ``const`` is a close quote; the easiest fix is to
# supply smart quotes manually.
[syntax_error_before_const]
header = ctype.h wchar.h wctype.h iconv.h net/route.h
regexp = \bbefore\ 'const' | \bbefore\ or\ at: const
desc =
  In some compilation modes, the compiler issues a vague error
  message, similar to “syntax error before ‘``const``’.” The actual
  problem is likely to be with the token preceding the ``const``. For
  instance, this can happen if the C1999 keyword ``inline`` is
  encountered in strict C1989 conformance mode, or the runtime
  erroneously assumes that the compiler supports a C2011 feature
  (e.g. ``_Thread_local``).

[sys_procfs_sigaltstack_unavailable]
header = sys/procfs.h
regexp = \bincomplete\b.*\bpr_altstack\b|\bpr_altstack\b.*\bincomplete\b
desc =
  This header assumes that ``struct sigaltstack`` is defined.  This is
  a compatibility name for ``stack_t``, provided by :file:`signal.h`,
  but unavailable in conformance mode.

[sys_socketvar_kernel_types_unavailable]
header = sys/socketvar.h
regexp = \b(?:kfpu|label|pgcnt|kt|mblk)_t\b
desc =
  |This header indirectly depends on type definitions for
  |kernel-internal structures such as:
  |
  | .. hlist::
  |    :columns: 5
  |
  |    * ``kfpu_t``
  |    * ``label_t``
  |    * ``pgcnt_t``
  |    * ``kt_t``
  |    * ``mblk_t``
  |
  |These types are unavailable in conformance mode.

[sys_user_MAXSIG_unavailable]
header = sys/user.h
regexp = \bMAXSIG\b
desc =
  This header depends on the constant ``MAXSIG``, which is provided
  by :file:`signal.h`, but unavailable in conformance mode.

[resolver_bitypes]
header = resolv.h arpa/nameser.h
regexp = \bsys/bitypes\.h\b
desc =
  This header attempts to include :file:`sys/bitypes.h`, which does not exist,
  because a preprocessor conditional relies on system-identification
  macros that pollute the user namespace and so are unavailable in
  conformance mode.

[nonstandard_bitfield]
header = sys/acct.h sys/mtio.h
regexp = non-standard\ for\ a\ bit\ field
desc =
  In strict conformance mode, the MIPSpro compiler objects to use of
  ``char`` and/or ``enum`` types as bitfields.
