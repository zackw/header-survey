# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This file specifies errors.  "Errors", in this case, means a
# situation where a header fails to compile in isolation, and this is
# not correctable by either of the techniques offered in prereqs.ini.
# An error is not necessarily a bug; one of the most commonly
# encountered errors is that modern versions of GCC don't support
# <varargs.h>, but do so by shipping a stub header that
# unconditionally fails the compilation, rather than by omitting the
# header altogether.
#
# There is one section per error.  The section name is the codeword
# that will be written to the inventory as a $E line.  There are three
# required entries in each section: "header" is a list of headers in
# which this error might appear, "regexp" specifies a regular
# expression used to detect the error, and "desc" is an HTML fragment
# that will be used to describe the error in the generated table.
#
# Note that you are limited to the regular expression syntax understood
# by Python 2.0: http://docs.python.org/release/2.0/lib/re-syntax.html
# All regular expressions are compiled in VERBOSE mode, which means:
#
#   Whitespace within the pattern is ignored, except when in a
#   character class or preceded by an unescaped backslash, and, when a
#   line contains a "#" neither in a character class or preceded by an
#   unescaped backslash, all characters from the leftmost such "#"
#   through the end of the line are ignored.
#
# and then applied using re.search() to each individual line of the
# diagnostics, in isolation.  The first match wins.

[unimpl_varargs]
header = varargs.h
regexp = \#error\b .* \bstdarg\.h\b
desc =
  Explicitly unimplemented: contains only an <code>#error</code> directive
  telling the programmer to use <code>stdarg.h</code> instead.

[unimpl_malloc]
header = malloc.h
regexp = \#error\b .* \bstdlib\.h\b
desc =
  Explicitly unimplemented: contains only an <code>#error</code> directive
  telling the programmer to use <code>stdlib.h</code> instead.

[deprec_ucontext]
header = ucontext.h
regexp = \#error\b .* \bdeprecated\b
desc =
  This OS deprecates <code>ucontext.h</code> and issues an <code>#error</code>
  if it is used in the default compilation mode.

[hpux_sotimeq_hash]
header = sys/socketvar.h
regexp = array\ type\ has\ incomplete\ element\ type
desc =
  Attempts to declare <code>extern struct sotimeq sotimeq_hash[];</code>
  with <code>struct sotimeq</code> an incomplete type; this is invalid.
  The necessary structure definition is immediately below the offending
  declaration.

[irix_fhandle_t]
header = rpcsvc/mount.h
regexp = fhandle_t
desc =
  Contains declarations depending on a typedef, <code>fhandle_t</code>,
  which is only defined in what appear to be private kernel headers.
  Other OSes define this type in this header.

[regexp_return_makes_pointer]
header = regexp.h
regexp = return\ makes\ pointer\ from\ integer\ without\ a\ cast
desc =
  Incorrect use of <code>RETURN()</code> instead of <code>ERROR()</code>
  in the embedded code in this header.
