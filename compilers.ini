# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This config file specifies how to identify the compiler in use,
# how to invoke it, how to put it into a strictly standards-compliant
# mode, and how to interpret certain things in its output.
# There is one section for each compiler, plus some defaults.
#
# Options and their meanings:
#
#  id_macro:     Macro which this compiler defines to identify itself.
#  id_regexp:    Regular expression which should match the 'version' output
#                of this compiler (see below).  This should have a named
#                match group (?P<version> ... ) which extracts the
#                version number.  If the version number might appear in
#                two different places, use <version1> and <version2> instead.
#                Optionally, include a <details> match group to extract
#                additional detail about the compiler.  If that might appear
#                in two different places, use <details1> and <details2> instead.
#  imitated:     Set to 'yes' if other compilers imitate this compiler to
#                the extent of defining the id_macro.
#
#  define:       Command line switch that defines a macro.  It is assumed
#                that the argument to this switch is in the form NAME=VALUE.
#  compile:      Space-separated list of command line options to compile a
#                source file without linking.  If possible, disable the
#                assembler too.  A dollar sign will be replaced by the
#                basename of the source file (i.e. with ".c" chopped off).
#  preproc:      As 'compile', but for running the preprocessor only.
#                This MUST output to a file, not to stdout.
#  version:      Command line options to get the compiler to print its
#                version number.  In some cases it is necessary to provide
#                a source file to make this happen (MSVC, HP acc); an argument
#                "$.c" or "$.i" will do that.
#  compile_out:  Name of the file that a 'compile' invocation will produce.
#  preproc_out:  Name of the file that a 'preproc' invocation will produce.
#  version_out:  Name of the file that a 'version' invocation will produce,
#                if any.
#
#  conform:      Command line options to put this compiler in its most
#                strictly conforming mode, turn on as many warnings as
#                possible, and make all warnings into errors.  However,
#                you MUST also suppress warnings about deprecated
#                declarations and unknown pragmas.
#
#  c1989:        Options to make this compiler conform specifically with
#                the 1989 C standard.  Can be blank.
#  c1999:        Options to make this compiler conform specifically with
#                the 1999 C standard.  Can be blank.  If unsupported, write
#                "c1999 = no".
#  c2011:        Options to make this compiler conform specifically with
#                the 2011 C standard.  Can be blank.  If unsupported, write
#                "c1999 = no".
#  threads:      Options required for compiling threaded code, if any.
#
# notfound_re:   Regular expression which matches this compiler's error message
#                for when an #include file does not exist.
# errloc_re:     Regular expression which extracts the file name and line number
#                from this compiler's error messages, as named groups
#                <file> and <line> respectively.

[DEFAULT]
# These are good for any Unixy compiler (with exceptions as noted below)
compile     = -S -o $.s
compile_out = $.s
preproc     = -E -o $.i
preproc_out = $.i
define      = -D
threads     = -pthread
version_out =
notfound_re = No\ such\ file\ or\ directory
errloc_re   = ^(?P<file>[^:]+) :(?P<line>\d+) [:\s]

[gcc]
imitated  = yes
id_macro  = __GNUC__

# Under some conditions the string "gcc" does not appear anywhere in
# gcc's --version output, so look instead for the "Copyright YYYY
# Free Software Foundation" blurb.
id_regexp =
  ^\S+\s+
    (?:\((?P<details1>[^)]+)\))?\s+
    (?P<version>[0-9.]+)\s*
    (?:\(?(?P<details2>.+?)\)?)?
  \nCopyright\ .*\ Free\ Software\ Foundation\b

# Note: nearly the same as clang
version  = --version
conform  = -Werror -pedantic -Wall -Wextra
           -Wno-unknown-pragmas -Wno-deprecated-declarations
c1989    = -std=c89
c1999    = -std=c99
c2011    = -std=c11

[clang]
id_macro  = __clang__
id_regexp = (?:\bclang\ version\ (?P<version1>[0-9.-]+)|
               \bLLVM (?P<version2>[0-9.-]+))
            .*?
            Target:\s+(?P<details>[a-zA-Z0-9_-]+)
notfound_re = file\ not\ found

# Note: nearly the same as GCC
version  = --version
conform  = -Werror -ferror-limit=0 -pedantic -Wall -Wextra
           -Wno-unknown-pragmas -Wno-deprecated-declarations
c1989    = -std=c89
c1999    = -std=c99
c2011    = -std=c11

[sunpro]
id_macro = __SUNPRO_C
id_regexp = ^\S+:\ Sun\ C\ (?P<version>[0-9.]+)\s*(?P<details>.+)?$

version = -V
conform = -Xc -v -fd -errfmt=error -errhdr=%all -errwarn=%all -errtags=yes
          -features=no%extensions -features=no%typeof
c1989   = -xc99=none
c1999   = -xc99=all
c2011   = no

[msvc]
id_macro  = _MSC_VER
id_regexp = ^Microsoft .* Compiler\ Version\ (?P<version>[0-9.-]+)

preproc     = /nologo /P
preproc_out = $.i
compile     = /nologo /c
compile_out = $.obj
define      = /D

version     = /c $.c
version_out = $.obj
conform     = /Za /W4 /Wall /WX /WL
c1989       =
c1999       = no
c2011       = no
