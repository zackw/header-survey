# -*- encoding: utf-8 -*-

# Copyright 2013 Zack Weinberg <zackw@panix.com> and other contributors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# There is NO WARRANTY.

# This config file defines all of the categories used in decltests.
# There are two kinds of categories: standards, and modules.  Every
# block of tests in a decltest must be labeled with a standard, and
# may also be labeled with a module.  This is done with structure
# within the section header:
#
#     [TESTCLASS:STANDARD]
#
# or
#
#     [TESTCLASS:STANDARD:MODULE]
#
# Modules allow for better annotations in the generated table when an
# entire related group of features is missing.  Modules are also how
# we tag things as optional. By default a module is optional, but if
# it's in the [required_modules] section instead of the [modules]
# section, then it's required.
#
# Currently, the only thing this file needs to define is the tag and
# human-readable label for each module or standard.  Tags must be
# identifiers; labels can use arbitrary HTML.  The profusion of
# cryptic three-letter module tags are mostly taken verbatim from the
# Single Unix Standard.

[standards]
c89   = ISO C1989
c99   = ISO C1999
c2011 = ISO C2011

# This is a bit of an oversimplification particularly wrt the older
# iterations, but I think it's the level of detail that is useful in
# 2013.
x5    = POSIX.1-1995
x6    = POSIX.1-2001
x7    = POSIX.1-2008

[required_modules]
# C99
tg_real    = type-generic math macros accepting real arguments
tg_complex = type-generic math macros accepting complex arguments

[modules]
# C99
imaginary     = pure imaginary numeric types
exactwidth    = exact-width integer types
fp_exceptions = floating-point exception control constants
fp_roundmodes = floating-point rounding mode control constants
infnan        = <code>INFINITY</code> and <code>NAN</code>

# C2011
atomic_typedefs =
  <code>typedef</code> names for <code>atomic</code> variants of
  basic types

# POSIX generally
xsi = X/Open System Interfaces Extension

# X5
aio   = asynchronous I/O
fsc   = <code>fsync</code>
ghb   = <code>gethostby*</code> and related globals and constants
iti   = classic interval timers (<code>getitimer</code>, <code>setitimer</code>)
ml    = locking data into memory
mm    = memory mapped files
mmc   = memory-mapping control constants
mp    = memory protection
mpc   = memory protection control constants
ms    = explicit flushing of memory mapped files
msg   = POSIX message queues
parm  = tunable thread scheduling
prio  = prioritized thread scheduling
rri   = round-robin thread scheduling
rts   = real-time signals
sel   = <code>select</code> and related structures, constants, and macros
sem   = POSIX semaphores
shm   = POSIX shared memory
sio   = synchronized I/O operations
stat  = file type test macros and constants
thr   = thread-related declarations
tmr   = high-resolution clocks and timers
tps   = prioritized thread scheduling
tsa   = thread stack allocation control
tsf   = thread-safe variants of historically unsafe functions
tsh   = cross-process thread synchronization
ucx   = <code>ucontext_t</code> and <code>mcontext_t</code>
ut    = <code>utimes</code>
vf    = <code>vfork</code>
yield = <code>sched_yield</code>

# X6
adv     = memory management advice
bar     = thread scheduling barriers
bar.tsh = cross-process thread scheduling barriers
cpt     = per-cpu timers
cs      = scheduling clock control
ip6     = IPv6 socket addresses
mht     = correct types for length fields in
          <code>struct msghdr</code> and <code>struct cmsghdr</code>
mon     = monotonic clock
nsc     = <code>NI_NUMERICSCOPE</code>
ps      = process scheduling control
raw     = raw sockets
spi     = spinlocks
ss      = sporadic server scheduling
tmo     = lock acquisition timeouts
tym     = typed memory objects

# X7
rob = robust mutexes
